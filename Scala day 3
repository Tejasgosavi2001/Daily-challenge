1.Best time to buy and sell stock
object Solution {
    def maxProfit(prices: Array[Int]): Int = {
        var minimum=prices(0)
        var maximum=0
        for(i<-1 to (prices.length-1)){
            if(prices(i)<minimum){
                minimum=prices(i)
            }
            else{
                maximum=maximum.max(prices(i)-minimum)
            }
        }
        return maximum
    }
}

2.3sum
import scala.collection.mutable.ListBuffer
object Solution {
    def threeSum(nums: Array[Int]): List[List[Int]] = {
        var output:List[List[Int]]=List.empty[List[Int]]
        var n=nums.size
        if(n<3){
            return output
        }
        nums.sortInPlace
        for(first<-0 until n){
            if(first>0 && nums(first)==nums(first-1)){

            }
            else{
                var second=first+1
                var third=n-1
                        while(second<third){
                            var sum=nums(first)+nums(second)+nums(third)
                            if(sum<0){
                                second=second+1
                            }
                            else if(sum>0){
                                third=third-1
                            }
                            else{
                                var nl=List(nums(first),nums(second),nums(third))
                                output=output:+nl
                                
                                second=second+1
                                third=third-1
                                while(second<third && nums(second)==nums(second-1)){
                                    second=second+1
                                }
                                while(second<third && nums(third)==nums(third+1)){
                                    third=third-1
                                }

                            }
                        }

                     }
        }
 return output
           }
}

3.Search Insert Position
object Solution {
    def searchInsert(nums: Array[Int], target: Int): Int = {
        var flag=0
        var result=0
      
        for(index<-0 to nums.length-1){
            if(nums(index)==target){
                flag=1
                result=index
            }
            if(flag==0 && nums(index)>target){
              result=index
              flag=1
            
            }
         
        }
       
        if( target>nums(nums.length-1)){
             result=nums.length
        }
        
        result
    }
}

4.Contains duplicate
import scala.collection.mutable.Map
object Solution {
    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {
        var result=Map[Int,Int]()
        for(index<-0 until nums.length){
            if(result.contains(nums(index))){
                var difference=(index-result(nums(index))).abs
                if(difference<=k){
                    return true
                }
                 else{
                result(nums(index))=index
                }
            }
            else{
                result(nums(index))=index
            }
        }
        return false
    }
}

5.Maximum depth of binary tree
/**
 * Definition for a binary tree node.
 * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {
 *   var value: Int = _value
 *   var left: TreeNode = _left
 *   var right: TreeNode = _right
 * }
 */
object Solution {
    def maxDepth(root: TreeNode): Int = {
        
        if(root==null){
            return 0
        }
        return 1+maxDepth(root.left).max(maxDepth(root.right))
    }
}

6.Minimum Path Sum
object Solution {
    def minPathSum(grid: Array[Array[Int]]): Int = {
          for(row <- 0 until grid.length){
            for(column <- 0 until grid(0).length){
                if(row > 0 && column > 0){
                    grid(row)(column) = (grid(row)(column) + grid(row-1)(column)).min(grid(row)(column) + grid(row)(column-1))
                }
                    
                else if(row > 0) {
                    grid(row)(column) += grid(row-1)(column);
                }
                    
                else if(column > 0){
                    grid(row)(column) += grid(row)(column-1);
                }
                    
            }
        }   
        return grid(grid.length-1)(grid(0).length-1)
    }
}
