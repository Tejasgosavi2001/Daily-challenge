1.Remove Duplicates from Sorted Array
object Solution {
    def removeDuplicates(nums: Array[Int]): Int = {
          val a=nums.distinct
          a.copyToArray(nums)
          a.size
      

    }
}

2.Valid Palindrome
object Solution {
    def isPalindrome(s: String): Boolean = {
        val normalized = s.filter(c => c.isLetter || c.isDigit).toLowerCase

    val size = normalized.length

    for (i <- 0 until size / 2) {
      if (normalized(i) != normalized(size - i - 1)) {
        return false
      }
    }

    true
    }
}

3.Container With Most Water
object Solution {
    def maxArea(height: Array[Int]): Int = {
         var left=0
        
        var right=height.size-1
        var maximum=0
       while(left<right){
           var currentarea=(right-left)*height(left).min(height(right))
         
           if(height(left)<height(right)){
               left=left+1
           }
            else if(height(left)>height(right)){
               right=right-1
           }
            else{
               right=right-1
               left=left+1
           }
             if(currentarea>maximum){
               maximum=currentarea
           }
           


       }

      return maximum
        
    }
}

4.Ransome note
object Solution {
    def canConstruct(ransomNote: String, magazine: String): Boolean = {
         if (ransomNote.length > magazine.length) false
        else
            ransomNote.toCharArray.diff(magazine.toCharArray).length == 0
    }
}

5.Climbing stairs
object Solution {
    def climbStairs(n: Int): Int = {
        if(n==0 || n==1){
            return 1
        }
        var prev=1
        var curr=1
        for(i<-2 to n){
            var temp=curr
            curr=prev+curr
            prev=temp
        }
        return curr
    }
}
